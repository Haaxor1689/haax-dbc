name: Build and Release

on: push

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run bundle

      - name: Set Git User
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Get Current Version
        id: get_version
        run: echo "::set-output name=version::$(node -e 'console.log(require("./package.json").version)')"

      - name: Check if Tag Exists
        id: check_tag
        run: |
          version="${{ steps.get_version.outputs.version }}"
          tag_exists=$(git ls-remote --tags origin "refs/tags/v$version")
          if [ -z "$tag_exists" ]; then
            echo "Tag does not exist. Creating tag..."
            git tag -a -m "Tag for version $version" "v$version"
            git push origin "v$version"
          else
            echo "Tag v$version already exists."
          fi
        shell: bash

      - name: Create or Get Release
        id: create_or_get_release
        run: |
          version="${{ steps.get_version.outputs.version }}"
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$version")
          if [ $response -eq 200 ]; then
            echo "Release v$version already exists."
            release_id=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$version" | jq -r .id)
          else
            echo "Release v$version does not exist. Creating release..."
            release_id=$(curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -d "{\"tag_name\": \"v$version\"}" "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r .id)
          fi
          echo "::set-output name=release_id::$release_id"
        shell: bash

      - name: Upload Artifact to Release
        run: |
          version="${{ steps.get_version.outputs.version }}"
          release_id="${{ steps.create_or_get_release.outputs.release_id }}"
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            artifact_file="haax-dbc.exe"
          else
            artifact_file="haax-dbc"
          fi
          existing_asset_id=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets" | jq -r ".[] | select(.name == \"$artifact_file\").id")
          if [ -n "$existing_asset_id" ]; then
            echo "Updating existing artifact: $artifact_file"
            curl -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/assets/$existing_asset_id"
          fi
          echo "Uploading artifact: $artifact_file"
          curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/octet-stream" --data-binary @"$artifact_file" "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$artifact_file"
        shell: bash
