name: Build and Release

on: push

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run bundle

      - name: Set Git User
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Check if tag exists
        id: check_tag
        run: |
          version=$(node -e "console.log(require('./package.json').version)")
          tag_exists=$(git ls-remote --tags origin "refs/tags/v$version")
          if [ -z "$tag_exists" ]; then
            echo "Tag does not exist. Creating tag..."
            git tag -a -m "Tag for version $version" "v$version"
            git push origin "v$version"
          else
            echo "Tag v$version already exists."
          fi
        shell: bash

      - name: Check if release exists
        id: check_release
        run: |
          version=$(node -e "console.log(require('./package.json').version")
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$version")
          if [ $response -eq 200 ]; then
            echo "Release v$version already exists."
          else
            echo "Release v$version does not exist. Creating release..."
          fi
        shell: bash

      - name: Create Release and Upload Artifacts
        run: |
          version=$(node -e "console.log(require('./package.json').version")
          if [ "${{ steps.check_release.outputs.response_code }}" -ne 200 ]; then
            # Release doesn't exist, so create it
            echo "Creating release for version $version"
            curl \
              -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\": \"v$version\", \"name\": \"Release $version\"}" \
              "https://api.github.com/repos/${{ github.repository }}/releases"
          fi

          # Upload artifacts
          echo "Uploading artifacts for version $version"
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            artifact_file="haax-dbc.exe"
          else
            artifact_file="haax-dbc"
          fi
          curl \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$artifact_file" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.response_code }}/assets?name=$artifact_file"
        shell: bash
